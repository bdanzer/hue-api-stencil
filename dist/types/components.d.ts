/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from './stencil.core';


export namespace Components {
  interface DpAlert {
    'alerted': boolean;
    'ms': number;
    'text': string;
    'toasty': (text: any, alert: any, ms: any) => Promise<void>;
  }
  interface DpRange {
    'ariaLabel': string;
    'ariaValueNow': number;
    'data': any;
    'disabled': boolean;
    'max': string;
    'min': string;
    'rangeValue': string;
  }
  interface DpSwitch {
    'ariaLabel': string;
    'callback': Function;
    'data': any;
    'disabled': boolean;
    'isChecked': boolean;
    'label': string;
  }
  interface HueApp {
    'lights': object;
    'proxyServer': string;
  }
  interface HueCard {
    'alert': string;
    'bri': any;
    'lightId': string;
    'lightName': string;
    'mode': string;
    'on': boolean;
    'reachable': boolean;
  }
  interface HueCollection {
    'group': boolean;
    'groups': object;
    'lights': any;
    'loading': boolean;
  }
  interface HueHeader {}
  interface HueLightGroup {
    'groups': any;
  }
  interface HueRowTitle {
    'any_on': boolean;
    'groupData': any;
    'groupId': string;
    'reachable': any;
    'title': string;
  }
}

declare global {


  interface HTMLDpAlertElement extends Components.DpAlert, HTMLStencilElement {}
  var HTMLDpAlertElement: {
    prototype: HTMLDpAlertElement;
    new (): HTMLDpAlertElement;
  };

  interface HTMLDpRangeElement extends Components.DpRange, HTMLStencilElement {}
  var HTMLDpRangeElement: {
    prototype: HTMLDpRangeElement;
    new (): HTMLDpRangeElement;
  };

  interface HTMLDpSwitchElement extends Components.DpSwitch, HTMLStencilElement {}
  var HTMLDpSwitchElement: {
    prototype: HTMLDpSwitchElement;
    new (): HTMLDpSwitchElement;
  };

  interface HTMLHueAppElement extends Components.HueApp, HTMLStencilElement {}
  var HTMLHueAppElement: {
    prototype: HTMLHueAppElement;
    new (): HTMLHueAppElement;
  };

  interface HTMLHueCardElement extends Components.HueCard, HTMLStencilElement {}
  var HTMLHueCardElement: {
    prototype: HTMLHueCardElement;
    new (): HTMLHueCardElement;
  };

  interface HTMLHueCollectionElement extends Components.HueCollection, HTMLStencilElement {}
  var HTMLHueCollectionElement: {
    prototype: HTMLHueCollectionElement;
    new (): HTMLHueCollectionElement;
  };

  interface HTMLHueHeaderElement extends Components.HueHeader, HTMLStencilElement {}
  var HTMLHueHeaderElement: {
    prototype: HTMLHueHeaderElement;
    new (): HTMLHueHeaderElement;
  };

  interface HTMLHueLightGroupElement extends Components.HueLightGroup, HTMLStencilElement {}
  var HTMLHueLightGroupElement: {
    prototype: HTMLHueLightGroupElement;
    new (): HTMLHueLightGroupElement;
  };

  interface HTMLHueRowTitleElement extends Components.HueRowTitle, HTMLStencilElement {}
  var HTMLHueRowTitleElement: {
    prototype: HTMLHueRowTitleElement;
    new (): HTMLHueRowTitleElement;
  };
  interface HTMLElementTagNameMap {
    'dp-alert': HTMLDpAlertElement;
    'dp-range': HTMLDpRangeElement;
    'dp-switch': HTMLDpSwitchElement;
    'hue-app': HTMLHueAppElement;
    'hue-card': HTMLHueCardElement;
    'hue-collection': HTMLHueCollectionElement;
    'hue-header': HTMLHueHeaderElement;
    'hue-light-group': HTMLHueLightGroupElement;
    'hue-row-title': HTMLHueRowTitleElement;
  }
}

declare namespace LocalJSX {
  interface DpAlert extends JSXBase.HTMLAttributes<HTMLDpAlertElement> {
    'alerted'?: boolean;
    'ms'?: number;
    'text'?: string;
  }
  interface DpRange extends JSXBase.HTMLAttributes<HTMLDpRangeElement> {
    'ariaLabel'?: string;
    'ariaValueNow'?: number;
    'data'?: any;
    'disabled'?: boolean;
    'max'?: string;
    'min'?: string;
    'onInputChanged'?: (event: CustomEvent<any>) => void;
    'onRangeChagned'?: (event: CustomEvent<any>) => void;
    'rangeValue'?: string;
  }
  interface DpSwitch extends JSXBase.HTMLAttributes<HTMLDpSwitchElement> {
    'ariaLabel'?: string;
    'callback'?: Function;
    'data'?: any;
    'disabled'?: boolean;
    'isChecked'?: boolean;
    'label'?: string;
    'onSwitchClicked'?: (event: CustomEvent<any>) => void;
  }
  interface HueApp extends JSXBase.HTMLAttributes<HTMLHueAppElement> {
    'lights'?: object;
    'proxyServer'?: string;
  }
  interface HueCard extends JSXBase.HTMLAttributes<HTMLHueCardElement> {
    'alert'?: string;
    'bri'?: any;
    'lightId'?: string;
    'lightName'?: string;
    'mode'?: string;
    'on'?: boolean;
    'reachable'?: boolean;
  }
  interface HueCollection extends JSXBase.HTMLAttributes<HTMLHueCollectionElement> {
    'group'?: boolean;
    'groups'?: object;
    'lights'?: any;
    'loading'?: boolean;
  }
  interface HueHeader extends JSXBase.HTMLAttributes<HTMLHueHeaderElement> {}
  interface HueLightGroup extends JSXBase.HTMLAttributes<HTMLHueLightGroupElement> {
    'groups'?: any;
  }
  interface HueRowTitle extends JSXBase.HTMLAttributes<HTMLHueRowTitleElement> {
    'any_on'?: boolean;
    'groupData'?: any;
    'groupId'?: string;
    'onGroupOff'?: (event: CustomEvent<any>) => void;
    'reachable'?: any;
    'title'?: string;
  }

  interface IntrinsicElements {
    'dp-alert': DpAlert;
    'dp-range': DpRange;
    'dp-switch': DpSwitch;
    'hue-app': HueApp;
    'hue-card': HueCard;
    'hue-collection': HueCollection;
    'hue-header': HueHeader;
    'hue-light-group': HueLightGroup;
    'hue-row-title': HueRowTitle;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements extends LocalJSX.IntrinsicElements {}
  }
}


